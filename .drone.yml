kind: pipeline
type: docker
name: default
clone:
  disable: true  #禁用默认克隆

volumes: # 定义流水线挂载目录，用于共享数据
  - name: maven-build
    host:
      path: /goeasy1.4/source/ # 从宿主机中挂载的目录
  - name: maven-service
    host:
      path: /goeasy1.4/service/

steps:
  - name: clone-test
    image: alpine/git
    volumes: # 将容器内目录挂载到宿主机，仓库需要开启Trusted设置
      - name: maven-build
        path: /drone/src/source #将应用打包好的Jar和执行脚本挂载出来
    commands:
      - pwd
      - ls
      - cd source
      - git clone https://github.com/zhy1733079927/hydronedemo.git  #自定义克隆地址
      - git version
      - ls


  - name: build-package # 流水线名称
    image: maven:3.6.3-openjdk-11 # 定义创建容器的Docker镜像
    volumes: # 将容器内目录挂载到宿主机，仓库需要开启Trusted设置
      - name: maven-build
        path: /drone/src/source # 将应用打包好的Jar和执行脚本挂载出来
      - name: maven-service
        path: /drone/src/service # 将应用打包好的Jar和执行脚本挂载出来
    commands: # 定义在Docker容器中执行的shell命令
      - cd source/hydronedemo/
      - pwd
      - ls
      - mvn clean package # 应用打包命令
      - ls
      - cp target/hydronedemo-0.0.1-SNAPSHOT.jar /drone/src/service/hydronedemo-0.0.1-SNAPSHOT.jar
      - cd /drone/src/source/
      - rm -rf hydronedemo/
      - cd /drone/src/service
      - ls

  - name: deploy-start # 流水线名称
    image: openjdk:8u302-jre # 定义创建容器的Docker镜像
    volumes: # 将容器内目录挂载到宿主机，仓库需要开启Trusted设置
      - name: maven-service
        path: /drone/src/service # 将应用打包好的Jar和执行脚本挂载出来
    commands: # 定义在Docker容器中执行的shell命令
      - cp /drone/src/service/hydronedemo-0.0.1-SNAPSHOT.jar /drone/src/hydronedemo-0.0.1-SNAPSHOT.jar
      - cd /drone/src/service/
      - cd ..
      - ls
      - nohup java -jar hydronedemo-0.0.1-SNAPSHOT.jar --server.port=3000 > log.output 2>&1 &
      - ls
      - tail -f log.output



#kind: pipeline # 定义对象类型，还有secret和signature两种类型
#type: docker # 定义流水线类型，还有kubernetes、exec、ssh等类型
#name: jar-deploy # 定义流水线名称
#node:
#  name: centos-runner
#
#steps: # 定义流水线执行步骤，这些步骤将顺序执行
#  - name: build-package # 流水线名称
#    image: maven:3.8-openjdk-11 # 定义创建容器的Docker镜像
#    volumes: # 将容器内目录挂载到宿主机，仓库需要开启Trusted设置
#      - name: maven-cache
#        path: /root/.m2 # 将maven下载依赖的目录挂载出来，防止重复下载
#      - name: maven-build
#        path: /app/build # 将应用打包好的Jar和执行脚本挂载出来
#    commands: # 定义在Docker容器中执行的shell命令
#      - mvn clean package # 应用打包命令
#      - cp target/dronedemo-0.0.1-SNAPSHOT.jar /app/build/dronedemo-0.0.1-SNAPSHOT.jar
##      - cp Dockerfile /app/build/Dockerfile
#      - cp run.sh /app/build/run.sh
#
#  - name: deploy-start
#    image: appleboy/drone-ssh # SSH工具镜像
#    settings:
#      host: 47.52.141.48 # 远程连接地址
#      username: root # 远程连接账号
#      password:
#        from_secret: ssh_password # 从Secret中读取SSH密码
#      port: 22 # 远程连接端口
#      command_timeout: 5m # 远程执行命令超时时间
#      script:
#        - cd /root/docker/maven/build # 进入宿主机构建目录
#        - chmod +x run.sh # 更改为可执行脚本
#        - ./run.sh # 运行脚本打包应用镜像并运行
#    when:
#      event:
#        - push
#